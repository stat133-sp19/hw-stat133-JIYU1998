prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
)
class(l) = 'summary.binvar'
return(l)
}
print.summary.binvar = function(dat) {
l = summary(dat)
cat('"Summary Binomial\n\n"')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n',n))
cat(sprintf('- prob of success : %s\n\n',p))
cat('"Measures\n"')
cat(sprintf('- mean    : %s',l[[3]]))
cat(sprintf('- variance: %s',l[[4]]))
cat(sprintf('- variance: %s',l[[5]]))
cat(sprintf('- variance: %s',l[[6]]))
cat(sprintf('- variance: %s',l[[7]]))
invisible(dat)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
print.summary.binvar = function(dat) {
l = summary(dat)
n = l[[1]]
p = l[[2]]
cat('"Summary Binomial\n\n"')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n',n))
cat(sprintf('- prob of success : %s\n\n',p))
cat('"Measures\n"')
cat(sprintf('- mean    : %s',l[[3]]))
cat(sprintf('- variance: %s',l[[4]]))
cat(sprintf('- variance: %s',l[[5]]))
cat(sprintf('- variance: %s',l[[6]]))
cat(sprintf('- variance: %s',l[[7]]))
invisible(dat)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
summary.binvar(bin1)
bin_variable(10,.3)
a = bin_variable(10,.3)
a[[1]]
a[[2]]
summary.binvar = function(dat) {
n = dat[[1]]
p = dat[[2]]
l = list(
trials = n,
prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
)
class(l) = 'summary.binvar'
return(l)
}
summary.binvar(bin_variable(10,.3))
bin_variable(10,.3)
a = bin_variable(10,.3)
a[[1]]
a[[2]]
dat = bin_variable(10,.3)
dat
n = dat[[1]]
n
p = dat[[2]]
p
l = list(
trials = n,
prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
l = list(
trials = n,
prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
)
l
l = list(
trials = n,
prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
)
l
summary.binvar = function(dat) {
n = dat[[1]]
p = dat[[2]]
l = list(
trials = n,
prob = p,
mean = aux_mean(n,p),
variance = aux_variance(n,p),
mode = aux_mode(n,p),
skewness = aux_skewness(n,p),
kurtosis = aux_kurtosis(n,p)
)
class(l) = 'summary.binvar'
return(l)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
print.summary.binvar = function(dat) {
l = summary.binvar(dat)
n = l[[1]]
p = l[[2]]
cat('"Summary Binomial"\n\n')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n',n))
cat(sprintf('- prob of success : %s\n\n',p))
cat('"Measures\n"')
cat(sprintf('- mean    : %s',l[[3]]))
cat(sprintf('- variance: %s',l[[4]]))
cat(sprintf('- variance: %s',l[[5]]))
cat(sprintf('- variance: %s',l[[6]]))
cat(sprintf('- variance: %s',l[[7]]))
invisible(dat)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
print.summary.binvar = function(dat) {
l = summary.binvar(dat)
n = l[[1]]
p = l[[2]]
cat('"Summary Binomial"\n\n')
cat('Parameters\n')
cat(sprintf('- number of trials: %s\n',n))
cat(sprintf('- prob of success : %s\n\n',p))
cat('Measures\n')
cat(sprintf('- mean    : %s\n',l[[3]]))
cat(sprintf('- variance: %s\n',l[[4]]))
cat(sprintf('- mode    : %s\n',l[[5]]))
cat(sprintf('- skewness: %s\n',l[[6]]))
cat(sprintf('- kurtosis: %s\n',l[[7]]))
invisible(dat)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
binsum1 <- summary(bin1)
binsum1
source(mean.R)
bin_mean = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
return(aux_mean(trials, prob))
} else {stop('invalid input')}
}
bin_mean(10, 0.3)
bin_mean(10, 3)
source('variance.R')
bin_variance = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
v = aux_variance(trials, prob)
return(v)
} else {stop('invalid value')}
}
bin_variance(10, 0.3)
source('mean.R')
bin_mean = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
m = aux_mean(trials, prob)
return(m)
} else {stop('invalid input')}
}
source('mode.R')
bin_mode = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
m = aux_mode(trials, prob)
return(m)
} else {stop('invalid value')}
}
bin_mode(10, 0.3)
#' @title  binomial skewness
#' @description binomial skewness
#' @param trials number of trials
#' @param prob probability of success
#' @return binomial skewness
source('skewness.R')
bin_skewness = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
s = aux_skewness(trials, prob)
return(s)
} else {stop('invalid value')}
}
bin_skewness(10, 0.3)
#' @title  binomial kurtosis
#' @description binomial kurtosis
#' @param trials number of trials
#' @param prob probability of success
#' @return binomial kurtosis
source('kurtosis.R')
bin_kurtosis = function(trials, prob) {
if(check_trials(trials)&check_prob(prob)) {
k = aux_kurtosis(trials, prob)
return(k)
} else {stop('invalid value')}
}
bin_kurtosis(10, 0.3)
library(testthat)
test_that('check_success',{
expect_error(check_success(c(1,2),1))
expect_error(check_success(1,1.2))
expect_error(check_prob('a'))
}
)
# Titel: Check success
# Description: check whether number of success is valid
# Input
#  trials: number of trials
#  success: number of success
# Output
#  True or False
check_success = function(success, trials) {
if(sum(success>trials)>0&trial%%1==0&sum(success%%1==0)==length(success)) {stop('invalid success value')}
else {
return(T)
}
}
context('test check_functions')
test_that('check_prob',{
expect_true(check_prob(0))
expect_error(check_prob(c(0,0.1)))
expect_error(check_prob('a'))
}
)
test_that('check_trial',{
expect_error(check_trials(-1))
expect_error(check_trials(c(0,0.1)))
expect_error(check_trials('a'))
}
)
test_that('check_success',{
expect_error(check_success(c(1,2),1))
expect_error(check_success(1,1.2))
expect_error(check_prob('a'))
}
)
typeof(3)
typeof(3)=='numeric'
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(check_prob('a'))
}
)
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(aux_mean('a'))
}
)
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(aux_mean('a'))
expect_equal(aux_mean(10, 0.3),3)
}
)
test_that('aux_variance',{
expect_equal(aux_variance(10,0.3),2.1)
expect_equal(typeof(aux_variance(10,.3)),'double')
expect_error(aux_variance('a'))
}
)
test_that('aux_mode',{
expect_equal(aux_mode(10,0.3),3)
expect_equal(typeof(aux_mode(10,.3)),'double')
expect_error(aux_mode('a'))
}
)
test_that('aux_skewness',{
expect_equal(aux_skewness(10,0.3),0.2760262)
expect_equal(typeof(aux_skewness(10,.3)),'double')
expect_error(aux_skewness('a'))
}
)
test_that('aux_kurtosis',{
expect_equal(aux_kurtosis(10,0.3),-0.1238095)
expect_equal(typeof(aux_kurtosis(10,.3)),'double')
expect_error(aux_kurtosis('a'))
}
)
aux_kurtosis(10,0.3)
aux_kurtosis(10,0.3)
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(aux_mean('a'))
expect_equal(aux_mean(10, 0.3),3)
}
)
test_that('aux_variance',{
expect_equal(aux_variance(10,0.3),2.1)
expect_equal(typeof(aux_variance(10,.3)),'double')
expect_error(aux_variance('a'))
}
)
test_that('aux_mode',{
expect_equal(aux_mode(10,0.3),3)
expect_equal(typeof(aux_mode(10,.3)),'double')
expect_error(aux_mode('a'))
}
)
test_that('aux_skewness',{
expect_equal(aux_skewness(10,0.3),0.2760262)
expect_equal(typeof(aux_skewness(10,.3)),'double')
expect_error(aux_skewness('a'))
}
)
test_that('aux_kurtosis',{
expect_equal(aux_kurtosis(10,0.3),-0.1238095)
expect_equal(typeof(aux_kurtosis(10,.3)),'double')
expect_error(aux_kurtosis('a'))
}
)
aux_kurtosis(10,0.3)
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(aux_mean('a'))
expect_equal(aux_mean(10, 0.3),3)
}
)
test_that('aux_variance',{
expect_equal(aux_variance(10,0.3),2.1)
expect_equal(typeof(aux_variance(10,.3)),'double')
expect_error(aux_variance('a'))
}
)
test_that('aux_mode',{
expect_equal(aux_mode(10,0.3),3)
expect_equal(typeof(aux_mode(10,.3)),'double')
expect_error(aux_mode('a'))
}
)
test_that('aux_skewness',{
expect_equal(aux_skewness(10,0.3),0.2760262)
expect_equal(typeof(aux_skewness(10,.3)),'double')
expect_error(aux_skewness('a'))
}
)
test_that('aux_kurtosis',{
expect_equal(aux_kurtosis(10,0.3),-0.1238095)
expect_equal(typeof(aux_kurtosis(10,.3)),'double')
expect_error(aux_kurtosis('a'))
}
)
test_that('aux_skewness',{
expect_equal(aux_skewness(10,0.3),(1-2*.3)/sqrt(10*.3*(1-0.3)))
expect_equal(typeof(aux_skewness(10,.3)),'double')
expect_error(aux_skewness('a'))
}
)
context('test summary functions')
test_that('aux_mean',{
expect_equal(aux_mean(1,0),0)
expect_equal(typeof(aux_mean(1,1)),'double')
expect_error(aux_mean('a'))
expect_equal(aux_mean(10, 0.3),3)
}
)
test_that('aux_variance',{
expect_equal(aux_variance(10,0.3),2.1)
expect_equal(typeof(aux_variance(10,.3)),'double')
expect_error(aux_variance('a'))
}
)
test_that('aux_mode',{
expect_equal(aux_mode(10,0.3),3)
expect_equal(typeof(aux_mode(10,.3)),'double')
expect_error(aux_mode('a'))
}
)
test_that('aux_skewness',{
expect_equal(aux_skewness(10,0.3),(1-2*.3)/sqrt(10*.3*(1-0.3)))
expect_equal(typeof(aux_skewness(10,.3)),'double')
expect_error(aux_skewness('a'))
}
)
test_that('aux_kurtosis',{
expect_equal(aux_kurtosis(10,0.3),(1-6*.3*(1-0.3))/(10*.3*(1-0.3)))
expect_equal(typeof(aux_kurtosis(10,.3)),'double')
expect_error(aux_kurtosis('a'))
}
)
bin_distribution(2,5)
bin_distribution(2,.5)
bin_distribution(2,5)
check_success = function(success, trials) {
if(sum(success>trials)>0|trials%%1!=0|sum(success%%1==0)!=length(success)) {stop('invalid success value')}
else {
return(T)
}
}
bin_distribution(2,.5)
check_success(2,5)
check_success = function(success, trials) {
if(sum(success>trials)>0|trials%%1!=0|sum(success%%1==0)!=length(success)) {stop('invalid success value')}
else {
return(T)
}
}
check_success(2,5)
check_success(5,2)
check_success(1:3,5)
bin_distribution(2,.5)
a = bin_distribution(2,.5)
typeof(a)
bin_distribution(1,.5)
bin_distribution(1,.5)[[2]]
bin_cumulative(2,0.5)
typeof(bin_cumulative(2,0.5))
bin_cumulative(1,.5)[[3]]
context('test summary functions')
test_that('bin_choose',{
expect_equal(bin_choose(5,2),10)
expect_equal(typeof(bin_choose(5,2)),'double')
expect_error(bin_choose(2,5))
}
)
test_that('bin_probability',{
expect_equal(bin_probability(success = 0:2, trials = 5, prob = 0.5),c(0.03125,0.15625,0.31250))
expect_equal(typeof(bin_probability(success = 2, trials = 5, prob = 0.5)),'double')
expect_error(bin_probability('a'))
expect_error(bin_probability(success = 0:5, trials = 2, prob = 0.5))
}
)
test_that('bin_distribution',{
expect_equal(typeof(bin_distribution(2,.5)),'list')
expect_error(bin_distribution(2,1.1))
expect_equal(bin_distribution(1,.5)[[2]],c(.5,.5))
}
)
test_that('bin_cumulative',{
expect_equal(typeof(bin_cumulative(2,.5)),'list')
expect_error(bin_cumulative(2,1.1))
expect_equal(bin_cumulative(1,.5)[[3]],c(.5,1.0))
}
)
# development version from GitHub:
#install.packages("devtools")
# install "cointoss" (without vignettes)
devtools::install_github("gastonstat/cointoss")
# install "cointoss" (with vignettes)
devtools::install_github("gastonstat/cointoss", build_vignettes = TRUE)
devtools::document()
setwd("C:/Users/dell/Desktop/STAT133/LabsWarmups/binomial/R")
devtools::document
library(roxygen2)
library('devtools')
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::test()
bin_variable(2,.5)
library(binomial)
variables = bin_variable(2,.5)
variables
summary(variables)
bin_variance(2,.5)
bin_mean(2,.5)
bin_mode(2,.5)
bin_skewness(2,.5)
bin_kurtosis(2,.5)
variables = bin_variable(trials = 2,probability = .5)
variables = bin_variable(trials = 2,prob = .5)
variables
summary(variables)
bin_variance(trials = 2,prob = .5)
bin_mean(trials = 2,prob = .5)
bin_mode(trials = 2,prob = .5)
bin_skewness(trials = 2,prob = .5)
bin_kurtosis(trials = 2,prob = .5)
bin_choose(trials = 5, success = 2)
bin_choose(trials = 5, successes = 2)
bin_choose(n = 5, k = 2)
bin_probability(1,2,.5)
dis = bin_distribution(2,.5)
dis
plot(dis)
cum = bin_cumulative(2,.5)
cum
plot(cum)
devtools::document()
